--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate cachegrind.out.9088
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         16777216 B, 64 B, direct-mapped
Command:          ./poisson -i 300 -n 101 -t 20
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir_____________________ I1mr__________ ILmr__________ Dr_____________________ D1mr________________ DLmr_______________ Dw__________________ D1mw________________ DLmw_______________ 

39,779,533,343 (100.0%) 1,898 (100.0%) 1,888 (100.0%) 18,078,954,764 (100.0%) 908,996,968 (100.0%) 51,462,072 (100.0%) 309,674,643 (100.0%) 296,706,206 (100.0%) 14,094,561 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_____________________________ I1mr___________ ILmr___________ Dr_____________________________ D1mr________________________ DLmr_______________________ Dw________________________ D1mw________________________ DLmw_______________________  file:function

< 39,759,817,554 (100.0%, 100.0%) 62 (3.3%, 3.3%) 62 (3.3%, 3.3%) 18,074,404,424 (100.0%, 100.0%) 908,929,991 (100.0%, 100.0%) 51,440,618 (100.0%, 100.0%) 306,751,307 (99.1%, 99.1%) 296,704,937 (100.0%, 100.0%) 14,093,405 (100.0%, 100.0%)  /home/isaac/Documents/ence464/Group13/poisson_iter.c:
  38,459,423,400  (96.7%)         10 (0.5%)       10 (0.5%)       17,486,665,800  (96.7%)         889,334,852  (97.8%)         46,749,659  (90.8%)         294,690,000 (95.2%)        291,089,700  (98.1%)         12,955,791  (91.9%)            poisson_iteration_inner_slice
   1,300,077,000   (3.3%)         48 (2.5%)       48 (2.5%)          587,585,100   (3.3%)          19,595,138   (2.2%)          4,690,959   (9.1%)          12,040,800  (3.9%)          5,612,686   (1.9%)          1,135,063   (8.1%)            apply_von_neuman_boundary_slice

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir___________________________ I1mr___________ ILmr___________ Dr____________________________ D1mr_______________________ DLmr______________________ Dw________________________ D1mw_______________________ DLmw______________________  function:file

> 38,459,423,400 (96.7%, 96.7%) 10 (0.5%, 0.5%) 10 (0.5%, 0.5%) 17,486,665,800 (96.7%,  96.7%) 889,334,852 (97.8%,  97.8%) 46,749,659 (90.8%,  90.8%) 294,690,000 (95.2%, 95.2%) 291,089,700 (98.1%,  98.1%) 12,955,791 (91.9%,  91.9%)  poisson_iteration_inner_slice:/home/isaac/Documents/ence464/Group13/poisson_iter.c

>  1,300,077,000  (3.3%, 99.9%) 48 (2.5%, 3.1%) 48 (2.5%, 3.1%)    587,585,100  (3.3%, 100.0%)  19,595,138  (2.2%, 100.0%)  4,690,959  (9.1%, 100.0%)  12,040,800  (3.9%, 99.0%)   5,612,686  (1.9%, 100.0%)  1,135,063  (8.1%, 100.0%)  apply_von_neuman_boundary_slice:/home/isaac/Documents/ence464/Group13/poisson_iter.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/isaac/Documents/ence464/Group13/poisson_iter.c
--------------------------------------------------------------------------------
Ir____________________ I1mr____ ILmr____ Dr___________________ D1mr_______________ DLmr______________ Dw_________________ D1mw_______________ DLmw______________ 

-- line 8 ----------------------------------------
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          #include <stdint.h>
             .         .        .                    .                   .                  .                   .                   .                  .          #include <stdbool.h>
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          #include "utils.h"
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          #include "poisson_iter.h"
             .         .        .                    .                   .                  .                   .                   .                  .          
             5  (0.0%) 2 (0.1%) 2 (0.1%)             0                   0                  0                   3  (0.0%)           0                  0          void apply_const_boundary(int N, double* next) {
           409  (0.0%) 1 (0.1%) 1 (0.1%)           305  (0.0%)           0                  0                   1  (0.0%)           0                  0              for (int j = 0; j < N; j++) {
        41,309  (0.0%) 0        0               30,805  (0.0%)           0                  0                 101  (0.0%)           0                  0                  for (int i = 0; i < N; i++) {
       112,211  (0.0%) 1 (0.1%) 1 (0.1%)        51,005  (0.0%)           0                  0              10,201  (0.0%)       1,275  (0.0%)      1,275  (0.0%)              idx(next, N, 0, j, i) = TOP_BOUNDARY_COND;
       163,216  (0.0%) 0        0               71,407  (0.0%)           0                  0              10,201  (0.0%)       1,276  (0.0%)      1,276  (0.0%)              idx(next, N, N - 1, j, i) = BOTTOM_BOUNDARY_COND;
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .              }
             4  (0.0%) 0        0                    2  (0.0%)           1  (0.0%)          0                   0                   0                  0          }
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          
        48,000  (0.0%) 0        0                    0                   0                  0              36,000  (0.0%)       5,877  (0.0%)      4,656  (0.0%)  void apply_von_neuman_boundary_slice(int N, double* source, double* curr, double* next, float delta, slice3D_t slice_3D) {
       154,800  (0.0%) 2 (0.1%) 2 (0.1%)       107,100  (0.0%)           0                  0               6,000  (0.0%)           0                  0              for (int k = slice_3D.k_start; k < slice_3D.k_end; k++) {
       178,200  (0.0%) 0        0               59,400  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.j_start == 0 && slice_3D.i_start == 0) {
       564,300  (0.0%) 2 (0.1%) 2 (0.1%)       267,300  (0.0%)       5,811  (0.0%)      1,363  (0.0%)      29,700  (0.0%)      11,693  (0.0%)      2,616  (0.0%)              idx(next, N, k, 0, 0) = (2 * idx(curr, N, k, 0, 0 + 1)
       326,700  (0.0%) 0        0              148,500  (0.0%)      12,300  (0.0%)      2,243  (0.0%)           0                   0                  0                          + 2 * idx(curr, N, k, 0 + 1, 0)
       594,000  (0.0%) 1 (0.1%) 1 (0.1%)       297,000  (0.0%)      17,530  (0.0%)      4,910  (0.0%)           0                   0                  0                          + idx(curr, N, k + 1, 0, 0) + idx(curr, N, k - 1, 0, 0)
       504,900  (0.0%) 1 (0.1%) 1 (0.1%)       207,900  (0.0%)      11,700  (0.0%)      4,528  (0.0%)           0                   0                  0                          - delta * delta * idx(source, N, k, 0, 0)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .          
       178,200  (0.0%) 0        0              118,800  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.j_end == N && slice_3D.i_end == N) {
       891,000  (0.0%) 2 (0.1%) 2 (0.1%)       386,100  (0.0%)       1,500  (0.0%)        585  (0.0%)      29,700  (0.0%)      29,700  (0.0%)      7,152  (0.1%)              idx(next, N, k, N - 1, N - 1) = (2 * idx(curr, N, k, N - 1, N - 1 - 1)
       475,200  (0.0%) 1 (0.1%) 1 (0.1%)       207,900  (0.0%)       5,750  (0.0%)      1,058  (0.0%)           0                   0                  0                          + 2 * idx(curr, N, k, N - 1 - 1, N - 1)
       950,400  (0.0%) 2 (0.1%) 2 (0.1%)       415,800  (0.0%)      31,134  (0.0%)      8,053  (0.0%)           0                   0                  0                          + idx(curr, N, k + 1, N - 1, N - 1) + idx(curr, N, k - 1, N - 1, N - 1)
       683,100  (0.0%) 1 (0.1%) 1 (0.1%)       267,300  (0.0%)      29,700  (0.0%)     24,494  (0.0%)           0                   0                  0                          - delta * delta * idx(source, N, k, N - 1, N - 1)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .          
       178,200  (0.0%) 0        0               89,100  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.j_end == N && slice_3D.i_start == 0) {
       742,500  (0.0%) 1 (0.1%) 1 (0.1%)       326,700  (0.0%)       1,500  (0.0%)        473  (0.0%)      29,700  (0.0%)      29,695  (0.0%)      6,746  (0.0%)              idx(next, N, k, N - 1, 0) = (2 * idx(curr, N, k, N - 1, 0 + 1)
       386,100  (0.0%) 1 (0.1%) 1 (0.1%)       178,200  (0.0%)       8,787  (0.0%)      1,196  (0.0%)           0                   0                  0                          + 2 * idx(curr, N, k, N - 1 - 1, 0)
       772,200  (0.0%) 1 (0.1%) 1 (0.1%)       356,400  (0.0%)      35,445  (0.0%)      7,042  (0.0%)           0                   0                  0                          + idx(curr, N, k + 1, N - 1, 0) + idx(curr, N, k - 1, N - 1, 0)
       594,000  (0.0%) 2 (0.1%) 2 (0.1%)       237,600  (0.0%)      29,700  (0.0%)     21,822  (0.0%)           0                   0                  0                          - delta * delta * idx(source, N, k, N - 1, 0)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .          
       178,200  (0.0%) 1 (0.1%) 1 (0.1%)        89,100  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.j_start == 0 && slice_3D.i_end == N) {
       712,800  (0.0%) 0        0              326,700  (0.0%)       1,500  (0.0%)        473  (0.0%)      29,700  (0.0%)      29,700  (0.0%)      9,327  (0.1%)              idx(next, N, k, 0, N - 1) = (2 * idx(curr, N, k, 0, N - 1 - 1)
       415,800  (0.0%) 1 (0.1%) 1 (0.1%)       178,200  (0.0%)      15,117  (0.0%)        985  (0.0%)           0                   0                  0                          + 2 * idx(curr, N, k, 0 + 1, N - 1)
       772,200  (0.0%) 2 (0.1%) 2 (0.1%)       356,400  (0.0%)      35,511  (0.0%)     10,629  (0.0%)           0                   0                  0                          + idx(curr, N, k + 1, 0, N - 1) + idx(curr, N, k - 1, 0, N - 1)
       594,000  (0.0%) 2 (0.1%) 2 (0.1%)       237,600  (0.0%)      29,700  (0.0%)     25,980  (0.1%)           0                   0                  0                          - delta * delta * idx(source, N, k, 0, N - 1)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .              
        89,100  (0.0%) 0        0               29,700  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.i_start == 0) {
    14,939,100  (0.0%) 1 (0.1%) 1 (0.1%)     8,910,000  (0.0%)           0                  0              29,700  (0.0%)           0                  0                      for (int j = slice_3D.j_start + 1; j < slice_3D.j_end - 1; j++) {
    73,507,500  (0.2%) 1 (0.1%) 1 (0.1%)    32,343,300  (0.2%)     367,500  (0.0%)    133,872  (0.3%)   2,940,300  (0.9%)   2,914,321  (1.0%)    765,807  (5.4%)                  idx(next, N, k, j, 0) = (2 * idx(curr, N, k, j, 0 + 1)
    70,567,200  (0.2%) 1 (0.1%) 1 (0.1%)    35,283,600  (0.2%)   2,054,213  (0.2%)    113,679  (0.2%)           0                   0                  0                              + idx(curr, N, k, j + 1, 0) + idx(curr, N, k, j - 1, 0)
    76,447,800  (0.2%) 2 (0.1%) 2 (0.1%)    35,283,600  (0.2%)   4,960,290  (0.5%)    768,757  (1.5%)           0                   0                  0                              + idx(curr, N, k + 1, j, 0) + idx(curr, N, k - 1, j, 0)
    58,806,000  (0.1%) 1 (0.1%) 1 (0.1%)    23,522,400  (0.1%)   2,914,500  (0.3%)  1,995,703  (3.9%)           0                   0                  0                              - delta * delta * idx(source, N, k, j, 0)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                      }
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .          
        89,100  (0.0%) 0        0               59,400  (0.0%)      16,500  (0.0%)          0                   0                   0                  0                  if (slice_3D.i_end == N) {
    14,939,100  (0.0%) 1 (0.1%) 1 (0.1%)     8,910,000  (0.0%)           0                  0              29,700  (0.0%)           0                  0                      for (int j = slice_3D.j_start + 1; j < slice_3D.j_end - 1; j++) {
    88,209,000  (0.2%) 1 (0.1%) 1 (0.1%)    38,223,900  (0.2%)     378,767  (0.0%)     81,677  (0.2%)   2,940,300  (0.9%)   1,826,700  (0.6%)     89,504  (0.6%)                  idx(next, N, k, j, N - 1) = (2 * idx(curr, N, k, j, N - 1 - 1)
    88,209,000  (0.2%) 2 (0.1%) 2 (0.1%)    41,164,200  (0.2%)     968,593  (0.1%)     10,238  (0.0%)           0                   0                  0                              + idx(curr, N, k, j + 1, N - 1) + idx(curr, N, k, j - 1, N - 1)
    94,089,600  (0.2%) 1 (0.1%) 1 (0.1%)    41,164,200  (0.2%)   2,200,290  (0.2%)     81,693  (0.2%)           0                   0                  0                              + idx(curr, N, k + 1, j, N - 1) + idx(curr, N, k - 1, j, N - 1)
    67,626,900  (0.2%) 2 (0.1%) 2 (0.1%)    26,462,700  (0.1%)   1,826,700  (0.2%)    232,110  (0.5%)           0                   0                  0                              - delta * delta * idx(source, N, k, j, N - 1)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                      }
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .          
        89,100  (0.0%) 0        0               29,700  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.j_start == 0) {
    14,939,100  (0.0%) 1 (0.1%) 1 (0.1%)     8,910,000  (0.0%)      16,500  (0.0%)          0              29,700  (0.0%)           0                  0                      for (int i = slice_3D.i_start + 1; i < slice_3D.i_end - 1; i++) {
    99,970,200  (0.3%) 1 (0.1%) 1 (0.1%)    49,985,100  (0.3%)     353,700  (0.0%)     25,272  (0.0%)   2,940,300  (0.9%)     393,600  (0.1%)    121,445  (0.9%)                  idx(next, N, k, 0, i) = (idx(curr, N, k, 0, i + 1) + idx(curr, N, k, 0, i - 1)
    41,164,200  (0.1%) 1 (0.1%) 1 (0.1%)    17,641,800  (0.1%)     349,200  (0.0%)    116,877  (0.2%)           0                   0                  0                              + 2 * idx(curr, N, k, 0 + 1, i)
    76,447,800  (0.2%) 2 (0.1%) 2 (0.1%)    35,283,600  (0.2%)     753,900  (0.1%)    138,793  (0.3%)           0                   0                  0                              + idx(curr, N, k + 1, 0, i) + idx(curr, N, k - 1, 0, i)
    58,806,000  (0.1%) 1 (0.1%) 1 (0.1%)    23,522,400  (0.1%)     393,600  (0.0%)    298,691  (0.6%)           0                   0                  0                              - delta * delta * idx(source, N, k, 0, i)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                      }
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .          
        89,100  (0.0%) 0        0               59,400  (0.0%)           0                  0                   0                   0                  0                  if (slice_3D.j_end == N) {
    14,939,100  (0.0%) 0        0            8,910,000  (0.0%)           0                  0              29,700  (0.0%)           0                  0                      for (int i = slice_3D.i_start + 1; i < slice_3D.i_end - 1; i++) {
   126,432,900  (0.3%) 2 (0.1%) 2 (0.1%)    58,806,000  (0.3%)     339,300  (0.0%)     25,259  (0.0%)   2,940,300  (0.9%)     371,400  (0.1%)    127,810  (0.9%)                  idx(next, N, k, N - 1, i) = (idx(curr, N, k, N - 1, i + 1) + idx(curr, N, k, N - 1, i - 1)
    47,044,800  (0.1%) 1 (0.1%) 1 (0.1%)    20,582,100  (0.1%)     341,100  (0.0%)    123,715  (0.2%)           0                   0                  0                              + 2 * idx(curr, N, k, N - 1 - 1, i)
    94,089,600  (0.2%) 1 (0.1%) 1 (0.1%)    41,164,200  (0.2%)     716,400  (0.1%)    147,123  (0.3%)           0                   0                  0                              + idx(curr, N, k + 1, N - 1, i) + idx(curr, N, k - 1, N - 1, i)
    67,626,900  (0.2%) 2 (0.1%) 2 (0.1%)    26,462,700  (0.1%)     371,400  (0.0%)    281,666  (0.5%)           0                   0                  0                              - delta * delta * idx(source, N, k, N - 1, i)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                      }
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .              }
        24,000  (0.0%) 0        0               12,000  (0.0%)           0                  0                   0                   0                  0          }
             .         .        .                    .                   .                  .                   .                   .                  .          
        48,000  (0.0%) 1 (0.1%) 1 (0.1%)             0                   0                  0              36,000  (0.0%)           0                  0          void poisson_iteration_inner_slice(int N, double* source, double* curr, double* next, float delta, slice3D_t slice_3D) {
        30,000  (0.0%) 0        0                6,000  (0.0%)           0                  0               6,000  (0.0%)           0                  0              int j_start = slice_3D.j_start  != 0 ? slice_3D.j_start : 1;
        36,000  (0.0%) 0        0               18,000  (0.0%)           0                  0               6,000  (0.0%)           0                  0              int j_end = slice_3D.j_end != N ? slice_3D.j_end : N-1;
             .         .        .                    .                   .                  .                   .                   .                  .          
        30,000  (0.0%) 1 (0.1%) 1 (0.1%)         6,000  (0.0%)           0                  0               6,000  (0.0%)           0                  0              int i_start = slice_3D.i_start  != 0 ? slice_3D.i_start : 1;
        36,000  (0.0%) 0        0               18,000  (0.0%)           0                  0               6,000  (0.0%)           0                  0              int i_end = slice_3D.i_end != N ? slice_3D.i_end : N-1;
             .         .        .                    .                   .                  .                   .                   .                  .              
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          
     2,412,000  (0.0%) 1 (0.1%) 1 (0.1%)     1,800,000  (0.0%)           0                  0               6,000  (0.0%)           0                  0              for (int i = i_start; i < i_end; i++) {
    15,325,200  (0.0%) 0        0           10,602,900  (0.1%)           0                  0             594,000  (0.2%)           0                  0                  for (int k = slice_3D.k_start; k < slice_3D.k_end; k++) {
 1,182,000,600  (3.0%) 1 (0.1%) 1 (0.1%)   882,090,000  (4.9%)           0                  0           2,940,300  (0.9%)           0                  0                      for (int j = j_start; j < j_end; j++) {
12,516,857,100 (31.5%) 2 (0.1%) 2 (0.1%) 5,821,794,000 (32.2%)  73,967,404  (8.1%) 12,407,056 (24.1%) 291,089,700 (94.0%) 291,089,700 (98.1%) 12,955,791 (91.9%)                  idx(next, N, k, j, i) = (idx(curr, N, k, j, i + 1) + idx(curr, N, k, j, i - 1)
 8,732,691,000 (22.0%) 1 (0.1%) 1 (0.1%) 4,075,255,800 (22.5%) 118,205,775 (13.0%)     21,600  (0.0%)           0                   0                  0                                  + idx(curr, N, k, j + 1, i) + idx(curr, N, k, j - 1, i)
 9,314,870,400 (23.4%) 2 (0.1%) 2 (0.1%) 4,075,255,800 (22.5%) 406,071,973 (44.7%)  4,496,369  (8.7%)           0                   0                  0                                  + idx(curr, N, k + 1, j, i) + idx(curr, N, k - 1, j, i)
 6,695,063,100 (16.8%) 1 (0.1%) 1 (0.1%) 2,619,807,300 (14.5%) 291,089,700 (32.0%) 29,824,634 (58.0%)           0                   0                  0                              - delta * delta * idx(source, N, k, j, i)) / 6;
             .         .        .                    .                   .                  .                   .                   .                  .                      }
             .         .        .                    .                   .                  .                   .                   .                  .                  }
             .         .        .                    .                   .                  .                   .                   .                  .              }
        24,000  (0.0%) 0        0               12,000  (0.0%)           0                  0                   0                   0                  0          }
             .         .        .                    .                   .                  .                   .                   .                  .          
             .         .        .                    .                   .                  .                   .                   .                  .          void poisson_iteration_slow(int N, double* source, double* curr, double* next, float delta, slice3D_t slice_3D) {
             .         .        .                    .                   .                  .                   .                   .                  .              for (int k = slice_3D.k_start; k < slice_3D.k_end; k++) {
             .         .        .                    .                   .                  .                   .                   .                  .                  for (int j = slice_3D.j_start; j < slice_3D.j_end; j++) {
             .         .        .                    .                   .                  .                   .                   .                  .                      for (int i = slice_3D.i_start; i < slice_3D.i_end; i++) {
             .         .        .                    .                   .                  .                   .                   .                  .                          if (i == 0 && j == 0) {
             .         .        .                    .                   .                  .                   .                   .                  .                              idx(next, N, k, j, i) = (2 * idx(curr, N, k, j, i + 1)
             .         .        .                    .                   .                  .                   .                   .                  .                                  + 2 * idx(curr, N, k, j + 1, i)
-- line 122 ----------------------------------------

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_____________________ I1mr_________ ILmr_________ Dr_____________________ D1mr________________ DLmr_______________ Dw_________________ D1mw________________ DLmw_______________ 

39,759,817,554 (100.0%)    62  (3.3%)    62  (3.3%) 18,074,404,424 (100.0%) 908,929,991 (100.0%) 51,440,618 (100.0%) 306,751,307 (99.1%) 296,704,937 (100.0%) 14,093,405 (100.0%)    annotated: files known & above threshold & readable, line numbers known
             0              0             0                      0                    0                   0                    0                   0                   0             annotated: files known & above threshold & readable, line numbers unknown
             0              0             0                      0                    0                   0                    0                   0                   0           unannotated: files known & above threshold & two or more non-identical
             0              0             0                      0                    0                   0                    0                   0                   0           unannotated: files known & above threshold & unreadable 
    19,560,089   (0.0%) 1,788 (94.2%) 1,779 (94.2%)      4,472,534   (0.0%)      60,915   (0.0%)     20,839   (0.0%)   2,923,318  (0.9%)       1,268   (0.0%)      1,155   (0.0%)  unannotated: files known & below threshold
       155,700   (0.0%)    48  (2.5%)    47  (2.5%)         77,806   (0.0%)       6,062   (0.0%)        615   (0.0%)          18  (0.0%)           1   (0.0%)          1   (0.0%)  unannotated: files unknown

